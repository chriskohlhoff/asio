set(target_prefix asio_unit_)

set(noinst_PROGRAMS
### NOTE: no compile only test for now! CK
# associated_allocator
# associated_executor
# async_result
# basic_datagram_socket
# basic_deadline_timer
# basic_raw_socket
# basic_seq_packet_socket
# basic_serial_port
# basic_signal_set
# basic_socket_acceptor
# basic_stream_socket
# basic_streambuf
# basic_waitable_timer
# bind_executor
buffer
buffered_read_stream
buffered_stream
buffered_write_stream
buffers_iterator
# completion_condition
# connect
coroutine
# datagram_socket_service
deadline_timer
# deadline_timer_service
# defer
# dispatch
error
# execution_context
# executor
# executor_work_guard
# high_resolution_timer
io_context
is_read_buffered
is_write_buffered
# packaged_task
# placeholders
# post
# raw_socket_service
read
read_at
read_until
# seq_packet_socket_service
serial_port
serial_port_base
# serial_port_service
signal_set
# signal_set_service
# socket_acceptor_service
socket_base
# steady_timer
strand
# stream_socket_service
streambuf
system_timer
# thread
# time_traits
# use_future
# uses_executor
# wait_traits
# waitable_timer_service
write
write_at
)

foreach(program ${noinst_PROGRAMS})
  string(REPLACE "/" "_" target ${program})
  add_executable(${target_prefix}${target} ${target}.cpp unit_test.hpp)
  set_target_properties(${target_prefix}${target} PROPERTIES
    CXX_STANDARD 14)
  target_link_libraries(${target_prefix}${target}
    asio::standalone)
  if(WIN32)
    target_link_libraries(${target_prefix}${target} wsock32 ws2_32)
  endif()
  # install(TARGETS ${target_prefix}${target}
  #  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endforeach()

